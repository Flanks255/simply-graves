plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.84'
    id "com.matthewprenger.cursegradle" version "1.4.0"
}
apply plugin: "com.matthewprenger.cursegradle"
apply from: 'https://files.saps.dev/ci/git-md-changelog.gradle'

def ENV = System.getenv()
version = "${minecraft_version}-${mod_version}-build.${ENV.GITHUB_RUN_NUMBER ?: 9999}"
group = 'com.flanks255'
base {
    archivesName = 'simplygraves'
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

//minecraft.accessTransformers.file rootProject.file('src/main/resources/META-INF/accesstransformer.cfg') //The file is empty, so this is commented out

runs {
    // applies to all the run configs below
    configureEach {
        //Limit ram usage for the dev environment to 4GB
        jvmArgument '-Xmx8G'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'neoforge.enabledGameTestNamespaces', "simplygraves"
    }

    server {
        systemProperty 'neoforge.enabledGameTestNamespaces', "simplygraves"
        programArgument '--nogui'
    }

    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', "simplygraves"
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', "simplygraves", '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven { url = 'https://maven.creeperhost.net/' }
    maven { url "https://www.cursemaven.com" }
}

dependencies {
    implementation "net.neoforged:neoforge:$neo_version"

    compileOnly "mezz.jei:jei-${minecraft_version}-common-api:${jei_version}" //new
    compileOnly "mezz.jei:jei-${minecraft_version}-neoforge-api:${jei_version}"
    runtimeOnly "mezz.jei:jei-${minecraft_version}-neoforge:${jei_version}"

//    compileOnly "curse.maven:TOP-245211:4629624"
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "simplygraves",
                "Specification-Vendor"    : "Flanks255",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Flanks255",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(reobfArtifact) {
                builtBy reobfArtifact
                artifactId = archivesBaseName
                classifier null
            }
        }
    }

    repositories {
        if (ENV.SAPS_TOKEN) {
            maven {
                url "https://maven.saps.dev/minecraft"
                credentials {
                    username = "flanks"
                    password = "${ENV.SAPS_TOKEN}"
                }
            }
        }
    }
}

if (ENV.CURSEFORGE_KEY) {
    curseforge {
        apiKey = ENV.CURSEFORGE_KEY
        project {
            id = project.curseforge_id
            releaseType = "release"
            addGameVersion "NeoForge"
            addGameVersion "1.20.4"
            mainArtifact(jar)
            changelog = getGitChangelog
            changelogType = 'markdown'
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
